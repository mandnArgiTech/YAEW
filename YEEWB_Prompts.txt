# PyEWB_Prompts.txt - A Roadmap for Building an Electronics Workbench Clone with Cursor AI

### Phase 1: Project Setup and Main Application Window

# Prompt 1: Initial Project Structure
Generate the initial directory and file structure for a Python-based electronic circuit simulator called 'PyEWB'. Create a root directory with a `main.py` file, and subdirectories for `components`, `simulation`, `ui`, and `resources/icons`. Add a basic `.gitignore` file for Python.

# Prompt 2: Main Window Skeleton (@main.py)
Using PyQt6, create the main application window in `@main.py`. The class should be `MainWindow` and inherit from `QMainWindow`. It must include:
1. A central widget that will hold a `QGraphicsView` for the schematic editor.
2. A standard menu bar with 'File', 'Edit', and 'Simulate' menus.
3. A component toolbar (`QToolBar`) on the left side.
4. A status bar at the bottom.
Instantiate and show this window in the `if __name__ == '__main__':` block.

---

### Phase 2: The Schematic Editor

# Prompt 3: Base Component Class (@components/base.py)
Create an abstract base class `BaseComponent` in a new file `components/base.py`. It must inherit from `QGraphicsItem`. It should define:
1. Properties for a component's name, value, and unique ID.
2. Abstract methods for `paint()` and `boundingRect()`.
3. A method to add connection points (terminals/pins) to the component.
4. Enable flags to make the item movable, selectable, and focusable.

# Prompt 4: Resistor Component (@components/resistor.py)
In a new file `components/resistor.py`, create a `Resistor` class that inherits from `@components/base.py::BaseComponent`.
1. Implement the `paint()` method to draw the standard zig-zag symbol for a resistor. Use `QPainterPath` for drawing.
2. Implement `boundingRect()` to define its clickable area.
3. Add two terminals (small circles) at each end for wire connections.
4. Add a property for its resistance value (e.g., '1k') that can be set. The value should be displayed near the symbol.

# Prompt 5: Drawing Wires
I need to implement wire drawing in the schematic editor. The user interaction should be:
1. Click on a component's terminal.
2. A line (`QGraphicsPathItem`) is drawn from that terminal to the current mouse cursor position.
3. Click on a second terminal to complete the connection. The wire should snap to the terminal.
4. Pressing 'Escape' should cancel the wire drawing.
Please outline the necessary event handlers (`mousePressEvent`, `mouseMoveEvent`, `keyPressEvent`) in the main `QGraphicsScene` class to achieve this.

---

### Phase 3: Circuit Representation (The Data Backend)

# Prompt 6: Circuit Graph (@simulation/graph.py)
Create a class named `CircuitGraph` in `simulation/graph.py`. This class will manage the circuit's connectivity.
1. Use the `networkx` library internally to represent the circuit as a graph.
2. Each electrical node in the circuit should be a node in the graph.
3. Write a method `add_component(component_instance, node1, node2)` that adds the component as an edge between two nodes in the graph.
4. Write a method `generate_pyspice_netlist()` that traverses the `networkx` graph and generates a string-based netlist compatible with the PySpice library format. For example, a resistor `R1` with value `1k` between nodes `1` and `GND` should become `'R1 1 GND 1k'`. Assume 'GND' is node 0.

---

### Phase 4: Simulation Integration

# Prompt 7: Simulation Controller (@simulation/engine.py)
Create a `SimulationEngine` class in `simulation/engine.py`. This class will be the bridge to PySpice.
1. It should take a netlist string (generated by `@simulation/graph.py`) as input.
2. Use the `PySpice.Spice.Netlist.Circuit` object to parse this netlist.
3. Create a method `run_transient_analysis(stop_time, step_time)` that sets up and runs a transient simulation (`.tran`) using the Ngspice backend.
4. The method should return the simulation results (time and voltage/current vectors) as NumPy arrays.

---

### Phase 5: Visualization (The Virtual Instruments)

# Prompt 8: Oscilloscope Widget (@ui/oscilloscope.py)
Using the `pyqtgraph` library, create a new `OscilloscopeWidget` in `ui/oscilloscope.py`.
1. The widget should inherit from `QWidget`.
2. It should contain a `pyqtgraph.PlotWidget`.
3. Create a public method `plot_data(time_data, voltage_data)` that takes two NumPy arrays and plots them on the widget.
4. Add labels for the X-axis ('Time (s)') and Y-axis ('Voltage (V)').
5. Ensure it has a grid and a legend.